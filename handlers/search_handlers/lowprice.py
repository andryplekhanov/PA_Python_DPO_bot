from loader import bot
from typing import Dict
from telebot.types import Message, CallbackQuery
from keyboards.inline.yes_no_reply import get_yes_no
from keyboards.inline.cities_for_choice import print_cities
from keyboards.inline.cities_for_choice import for_city
from states.search_info import LowPriceStates
from telegram_bot_calendar import DetailedTelegramCalendar
from datetime import date, timedelta
from utils.get_cities import parse_cities_group
from utils.get_hotels import parse_hotels, process_hotels_info, get_hotel_info_str
from utils.get_photos import parse_photos, process_photos
import re


@bot.message_handler(commands=['lowprice'])
def bot_low_price(message: Message) -> None:
    bot.delete_state(message.from_user.id, message.chat.id)  # –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–ø—Ä–æ—Å–∞ –∑–∞—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    bot.set_state(message.from_user.id, LowPriceStates.cities, message.chat.id)
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')


@bot.message_handler(state=LowPriceStates.cities, is_digit=True)  # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ - —Ü–∏—Ñ—Ä—ã
def get_city_incorrect(message: Message) -> None:
    bot.send_message(message.from_user.id, '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤')


@bot.message_handler(state=LowPriceStates.cities, is_digit=False)  # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ - –Ω–µ —Ü–∏—Ñ—Ä—ã
def get_city(message: Message) -> None:
    cities_dict = parse_cities_group(message.text)
    if cities_dict:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['cities'] = cities_dict
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:', reply_markup=print_cities(cities_dict))
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –ù–µ –Ω–∞—Ö–æ–∂—É —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.')


@bot.callback_query_handler(func=None, city_config=for_city.filter())
def clarify_city(call: CallbackQuery) -> None:
    with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
        data['city_id'] = re.search(r'\d+', call.data).group()
        data['city'] = [city for city, city_id in data['cities'].items() if city_id == data['city_id']][0]
    bot.set_state(call.from_user.id, LowPriceStates.amount_hotels, call.message.chat.id)
    bot.send_message(call.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –Ω–∞–π—Ç–∏?')


@bot.message_handler(state=LowPriceStates.amount_hotels, is_digit=True)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π - —á–∏—Å–ª–æ
def get_amount_hotels(message: Message) -> None:
    if 1 <= int(message.text) <= 10:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['amount_hotels'] = int(message.text)
        bot.send_message(message.from_user.id, '–ñ–µ–ª–∞–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?', reply_markup=get_yes_no())
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –≤ —Ç–æ–ø–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10')


@bot.message_handler(state=LowPriceStates.amount_hotels, is_digit=False)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π - –Ω–µ —á–∏—Å–ª–æ
def amount_hotels_incorrect(message: Message) -> None:
    bot.send_message(message.from_user.id, '‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10')


@bot.callback_query_handler(func=lambda call: call.data == 'yes' or call.data == 'no')
def need_photo_reply(call: CallbackQuery) -> None:
    with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
        if call.data == "yes":
            bot.send_message(call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ')
            data['need_photo'] = True
            bot.set_state(call.from_user.id, LowPriceStates.amount_photo, call.message.chat.id)
        elif call.data == "no":
            data['need_photo'] = False
            data['amount_photo'] = 0
            calendar, step = DetailedTelegramCalendar(min_date=date.today()).build()
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞", reply_markup=calendar)
        else:
            bot.send_message(call.message.chat.id, text='‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')


@bot.message_handler(state=LowPriceStates.amount_photo, is_digit=True)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ - —á–∏—Å–ª–æ
def get_amount_photo(message: Message) -> None:
    if 1 <= int(message.text) <= 10:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['amount_photo'] = int(message.text)
        calendar, step = DetailedTelegramCalendar(min_date=date.today()).build()
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞", reply_markup=calendar)
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10')


@bot.message_handler(state=LowPriceStates.amount_photo, is_digit=False)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ - –Ω–µ —á–∏—Å–ª–æ
def amount_photo_incorrect(message: Message) -> None:
    bot.send_message(message.from_user.id, '‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –æ—Ç 1 –¥–æ 10')


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def date_reply(call: CallbackQuery) -> None:
    with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
        if not data.get('start_date'):
            result, key, step = DetailedTelegramCalendar(min_date=date.today()).process(call.data)
        elif not data.get('end_date'):
            new_start_date = data.get('start_date') + timedelta(1)
            result, key, step = DetailedTelegramCalendar(min_date=new_start_date).process(call.data)

    if not result and key:
        bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É", call.message.chat.id, call.message.message_id, reply_markup=key)
    elif result:
        with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
            if not data.get('start_date'):
                data['start_date'] = result
                calendar, step = DetailedTelegramCalendar(min_date=result + timedelta(1)).build()
                bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞",
                                      call.message.chat.id, call.message.message_id, reply_markup=calendar)
            elif not data.get('end_date'):
                data['end_date'] = result
                data_dict = data
                ready_for_answer(call.message, data_dict)


def ready_for_answer(message: Message, data: Dict) -> None:
    amount_nights = int((data['end_date'] - data['start_date']).total_seconds() / 86400)
    reply_str = f"‚úÖ –û–∫, –∏—â–µ–º: <b>—Ç–æ–ø {data['amount_hotels']}</b> " \
                f"—Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ <b>{data['city']}</b>\n" \
                f"{f'–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ' if data['need_photo'] else f'–§–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω—ã'}" \
                f" ‚Äî <b>{data['amount_photo']}</b> —à—Ç—É–∫\n" \
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: <b>{amount_nights} –Ω–æ—á.</b> " \
                f"(—Å {data['start_date']} –ø–æ {data['end_date']})."
    bot.edit_message_text(reply_str, message.chat.id, message.message_id, parse_mode="html")

    hotels = parse_hotels(data).get('results')
    if hotels:
        result_dict = process_hotels_info(hotels, amount_nights)
        if result_dict:
            for hotel_id, hotel_data in result_dict.items():
                hotel_info_str = get_hotel_info_str(hotel_data, amount_nights)
                bot.send_message(message.chat.id, hotel_info_str, parse_mode="html", disable_web_page_preview=True)

                if data['need_photo']:
                    all_photos = "https://www.hotels.com/ho{id}/?pwaThumbnailDialog=thumbnail-gallery".format(
                        id=hotel_id)
                    msg = "<b>üñº –§–æ—Ç–æ –æ—Ç–µ–ª—è:</b>\n" \
                          "    –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ <a href='{all_photos}'>–ø–æ —Å—Å—ã–ª–∫–µ >></a>".format(all_photos=all_photos)
                    bot.send_message(message.chat.id, msg, parse_mode="html", disable_web_page_preview=True)

                    photos_info_list = parse_photos(hotel_id)
                    if photos_info_list:
                        photos_list = process_photos(photos_info_list, data['amount_photo'])
                        if photos_list:
                            for photo_url in photos_list:
                                bot.send_photo(message.chat.id, photo_url)
                        else:
                            bot.send_message(message.chat.id, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ.')
                    else:
                        bot.send_message(message.chat.id, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ.')
        else:
            bot.send_message(message.chat.id, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–µ–ª—è–º –≥–æ—Ä–æ–¥–∞!')
    else:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
