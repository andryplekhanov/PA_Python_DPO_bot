from loader import bot
from telebot.types import Message, CallbackQuery
from keyboards.inline.yes_no_reply import get_yes_no
from keyboards.inline.cities_for_choice import print_cities
from utils.factories import for_city
from states.search_info import UsersStates
from telegram_bot_calendar import DetailedTelegramCalendar
from datetime import date, timedelta
from utils.get_cities import parse_cities_group
from utils.ready_for_answer import low_high_price_answer, best_deal_answer
import re


@bot.message_handler(state=UsersStates.cities, is_digit=True)  # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ - —Ü–∏—Ñ—Ä—ã
def get_city_incorrect(message: Message) -> None:
    bot.send_message(message.from_user.id, '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤')


@bot.message_handler(state=UsersStates.cities, is_digit=False)  # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ - –Ω–µ —Ü–∏—Ñ—Ä—ã
def get_city(message: Message) -> None:
    cities_dict = parse_cities_group(message.text)
    if cities_dict:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['cities'] = cities_dict
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:', reply_markup=print_cities(cities_dict))
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –ù–µ –Ω–∞—Ö–æ–∂—É —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.')


@bot.callback_query_handler(func=None, city_config=for_city.filter())
def clarify_city(call: CallbackQuery) -> None:
    with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
        data['city_id'] = re.search(r'\d+', call.data).group()
        data['city'] = [city for city, city_id in data['cities'].items() if city_id == data['city_id']][0]
    bot.set_state(call.from_user.id, UsersStates.amount_hotels, call.message.chat.id)
    bot.send_message(call.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –Ω–∞–π—Ç–∏?')


@bot.message_handler(state=UsersStates.amount_hotels, is_digit=True)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π - —á–∏—Å–ª–æ
def get_amount_hotels(message: Message) -> None:
    if 1 <= int(message.text) <= 10:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['amount_hotels'] = int(message.text)
        bot.send_message(message.from_user.id, '–ñ–µ–ª–∞–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?', reply_markup=get_yes_no())
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –≤ —Ç–æ–ø–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10')


@bot.message_handler(state=UsersStates.amount_hotels, is_digit=False)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π - –Ω–µ —á–∏—Å–ª–æ
def amount_hotels_incorrect(message: Message) -> None:
    bot.send_message(message.from_user.id, '‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10')


@bot.callback_query_handler(func=lambda call: call.data == 'yes' or call.data == 'no')
def need_photo_reply(call: CallbackQuery) -> None:
    with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
        if call.data == "yes":
            bot.send_message(call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ')
            data['need_photo'] = True
            bot.set_state(call.from_user.id, UsersStates.amount_photo, call.message.chat.id)
        elif call.data == "no":
            data['need_photo'] = False
            data['amount_photo'] = 0
            calendar, step = DetailedTelegramCalendar(min_date=date.today()).build()
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞", reply_markup=calendar)
        else:
            bot.send_message(call.message.chat.id, text='‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')


@bot.message_handler(state=UsersStates.amount_photo, is_digit=True)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ - —á–∏—Å–ª–æ
def get_amount_photo(message: Message) -> None:
    if 1 <= int(message.text) <= 10:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['amount_photo'] = int(message.text)
        calendar, step = DetailedTelegramCalendar(min_date=date.today()).build()
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞", reply_markup=calendar)
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10')


@bot.message_handler(state=UsersStates.amount_photo, is_digit=False)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ - –Ω–µ —á–∏—Å–ª–æ
def amount_photo_incorrect(message: Message) -> None:
    bot.send_message(message.from_user.id, '‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –æ—Ç 1 –¥–æ 10')


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def date_reply(call: CallbackQuery) -> None:
    with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
        if not data.get('start_date'):
            result, key, step = DetailedTelegramCalendar(min_date=date.today()).process(call.data)
        elif not data.get('end_date'):
            new_start_date = data.get('start_date') + timedelta(1)
            result, key, step = DetailedTelegramCalendar(min_date=new_start_date).process(call.data)

    if not result and key:
        bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É", call.message.chat.id, call.message.message_id, reply_markup=key)
    elif result:
        with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
            if not data.get('start_date'):
                data['start_date'] = result
                calendar, step = DetailedTelegramCalendar(min_date=result + timedelta(1)).build()
                bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞",
                                      call.message.chat.id, call.message.message_id, reply_markup=calendar)
            elif not data.get('end_date'):
                data['end_date'] = result

                if data.get('last_command') in ('lowprice', 'highprice'):
                    data_dict = data
                    low_high_price_answer(call.message, data_dict)
                    bot.set_state(call.from_user.id, UsersStates.last_command, call.message.chat.id)
                    bot.send_message(call.message.chat.id,
                                     f"üëç –í–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫.\n–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∫–æ–º–∞–Ω–¥—É!\n"
                                     f"–ù–∞–ø—Ä–∏–º–µ—Ä: <b>/help</b>", parse_mode="html")
                else:
                    bot.set_state(call.from_user.id, UsersStates.start_price, call.message.chat.id)
                    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å $:")


@bot.message_handler(state=UsersStates.start_price, is_digit=True)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ $ - —á–∏—Å–ª–æ
def get_start_price(message: Message) -> None:
    if int(message.text) > 0:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['start_price'] = int(message.text)
        bot.set_state(message.from_user.id, UsersStates.end_price, message.chat.id)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å $:")
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')


@bot.message_handler(state=UsersStates.start_price, is_digit=False)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ $ - –Ω–µ —á–∏—Å–ª–æ
def start_price_incorrect(message: Message) -> None:
    bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')


@bot.message_handler(state=UsersStates.end_price, is_digit=True)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ $ - —á–∏—Å–ª–æ
def get_end_price(message: Message) -> None:
    if int(message.text) > 0:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if int(message.text) > data['start_price']:
                data['end_price'] = int(message.text)
                bot.set_state(message.from_user.id, UsersStates.start_distance, message.chat.id)
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º\n"
                                                  "(–Ω–∞–ø—Ä–∏–º–µ—Ä 0.1):")
            else:
                bot.send_message(message.chat.id,
                                 f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {data['start_price']}$")
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')


@bot.message_handler(state=UsersStates.end_price, is_digit=False)  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ $ - –Ω–µ —á–∏—Å–ª–æ
def end_price_incorrect(message: Message) -> None:
    bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')


@bot.message_handler(state=UsersStates.start_distance)
def get_start_distance(message: Message) -> None:
    if ',' in message.text:
        message.text = message.text.replace(',', '.')

    try:
        message.text = float(message.text)
        if message.text > 0:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['start_distance'] = message.text
            bot.set_state(message.from_user.id, UsersStates.end_distance, message.chat.id)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º\n"
                                              "(–Ω–∞–ø—Ä–∏–º–µ—Ä 15.5):")
        else:
            bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')
    except Exception:
        bot.send_message(message.chat.id, "‚ö†Ô∏è–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º\n"
                                          "(–Ω–∞–ø—Ä–∏–º–µ—Ä 0.1):")


@bot.message_handler(state=UsersStates.end_distance)
def get_end_distance(message: Message) -> None:
    if ',' in message.text:
        message.text = message.text.replace(',', '.')

    try:
        message.text = float(message.text)
        if message.text > 0:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                if message.text > data['start_distance']:
                    data['end_distance'] = message.text
                    data_dict = data
                    best_deal_answer(message, data_dict)
                    bot.set_state(message.from_user.id, UsersStates.last_command, message.chat.id)
                    bot.send_message(message.chat.id,
                                     f"üëç –í–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫.\n–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∫–æ–º–∞–Ω–¥—É!\n"
                                     f"–ù–∞–ø—Ä–∏–º–µ—Ä: <b>/help</b>", parse_mode="html")
                else:
                    bot.send_message(message.chat.id,
                                     f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ {data['start_distance']}")
        else:
            bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')

    except Exception:
        bot.send_message(message.chat.id, "‚ö†Ô∏è–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º\n"
                                          "(–Ω–∞–ø—Ä–∏–º–µ—Ä 15.5):")
